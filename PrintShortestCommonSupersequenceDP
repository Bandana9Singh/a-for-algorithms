/**
 * Shortest common supersequence, Leetcode: 1092, all test cases passed
 **/
 class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        int i, j, k, m = str1.length(), n = str2.length();
        int [][] T = new int [m+1][n+1];
        StringBuilder LCS = new StringBuilder();
        StringBuilder output = new StringBuilder();
        for (int [] row : T) {
            Arrays.fill(row, -1);
        }  
        for (i = 0 ; i < m+1; i++) {
            T[i][0] = 0;
        }
        for (j = 0 ; j < n+1; j++) {
            T[0][j] = 0;
        }
        for (i = 1; i < m+1; i++) {
            for (j = 1; j < n+1; j++) {
                if (T[i][j] == -1) {
                    if (str1.charAt(i-1) == str2.charAt(j-1)) {
                        T[i][j] = 1 + T[i-1][j-1];
                    } else {
                        T[i][j] = Math.max(T[i-1][j], T[i][j-1]);
                    }
                }
            }
        }
        i = m; j = n;
        while(i > 0 && j > 0) {
            if (str1.charAt(i-1) == str2.charAt(j-1)) {
                LCS.append(str1.charAt(i-1));
                i--;
                j--;
            } 
            else {
                if (T[i-1][j] > T[i][j-1]) {
                    i--;
                }
                else {
                    j--;
                }
            }
        }
        LCS = LCS.reverse();
        i = 0; j = 0; k = 0;
        while(i < m && j < n && k < LCS.length()) {
            if ((str1.charAt(i) == LCS.charAt(k)) && (str2.charAt(j) == LCS.charAt(k))) {
                output.append(LCS.charAt(k));
                i++; j++; k++;
            } else if((str1.charAt(i) == LCS.charAt(k)) && (str2.charAt(j) != LCS.charAt(k))){
                output.append(str2.charAt(j));
                j++;
            } else {
                output.append(str1.charAt(i));
                i++;  
            }
        }
        while (i < m) {
            output.append(str1.charAt(i));
            i++;
        }
        while (j < n) {
            output.append(str2.charAt(j));
            j++;
        }
        return output.toString();
    }
}
